using System;
using System.Linq;
using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Text;

namespace EnumGenerator
{

    [Generator]
    public class CodeGenerator : ISourceGenerator
    {
        public void Initialize(GeneratorInitializationContext context)
        {
        }

        public void Execute(GeneratorExecutionContext context)
        {
            //var compilationAssemblyName = context.Compilation.AssemblyName;
            //var entryAssembly           = Assembly.GetEntryAssembly();
            //var executingAssembly       = Assembly.GetExecutingAssembly();
            //var callingAssembly         = Assembly.GetCallingAssembly();
            var mainMethod = context.Compilation.GetEntryPoint(context.CancellationToken);
            // var ee         = context.Compilation.SyntaxTrees
            //                         .SelectMany(x => x.GetRoot().DescendantNodes()
            //                                           .OfType<TypeDeclarationSyntax>()).Select(x => x.ToFullString());
            // var join       = string.Join(",", ee);
            //
            // var lines = context.Compilation.SyntaxTrees.SelectMany(x => x.GetText().Lines);
            // // lines.SelectMany(x => x.Text)
            // var s = string.Join($"{Environment.NewLine}", lines);

            // var refs              = context.Compilation.ReferencedAssemblyNames.Where(x => !x.HasPublicKey);

            // var refs2 = context.Compilation.References.Select(x => x.Display);

            // var refs = context.Compilation.GetUsedAssemblyReferences();
            // var name       = context.Compilation
            //Debug.WriteLine(join);
            
            // context.Compilation.
            string source = $@" // <auto-generated/>
using System;

namespace {mainMethod.ContainingNamespace.ToDisplayString()}
{{
    public enum TestEnum
    {{
        {"A,B,C,D"}
    }}
    partial class Program
    {{
        static partial void Hello(string Name)
        {{
            Console.WriteLine($""Generator Says: Hello {{Name}} "");
        }}
    }}
}}
";
            var sourceText = SourceText.From(source, Encoding.UTF8);
            context.AddSource($"Program.g.cs", sourceText);
        }
    }

}
